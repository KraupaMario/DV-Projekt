<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Projektskizze</title>
</head>
<body>
	<header>
		<img src="images/HFU-Logo.png">
		<h1>Projekt: Black Jack (22) </h1>
		<h2>Semester: SS 2022</h2>
		<b>Teammitglieder: </b>
		<ul>
			<li>Mario Kraupa (kraupama@hs-furtwangen.de) (Teamleiter)</li>
			<li>Dominik Riegger (rieggerd@hs-furtwangen.de)</li>
			<li>Jannik Wäschle (waeschlj@hs-furtwangen.de)</li>
			<li>Paul Kammerer (kammerer@hs-furtwangen.de)</li>
			<li>Julian Hermle (hermleju@hs-furtwangen.de)</li>
			
		</ul>
	</header>
	<main>
		<h2>1. Projekt-Beschreibung</h2>
		<p>Unser Datenverarbeitungsprojekt ist Black Jack. Black Jack ist das am meisten gespielte Kartenglückspiel. 
		Gespielt wird mit 6 Decks a 52 Karten, also insgesamt 312 Karten. 
		Ziel des Spiels ist es, mit zwei oder mehr Karten an 21 Punkte heranzukommen und den Dealer (Bankhalter) zu überbieten. 
		Erreicht der Spieler oder der Dealer genau 21 Punkte (Black Jack), so gewinnt dieser sofort.
        Kommt einer der beiden über 21 Punkte, so verliert er diese Runde.
        Wenn der Spieler gewinnt, erhält er seinen doppelten Einsatz, bei einem Black Jack seinen 2,5fachen Einsatz auf sein Konto zurück. 
        Verliert der Spieler, so erhält der Dealer (Bankhalter) den Einsatz.	
		Haben beide die gleiche Punktzahl, so bleibt der Einsatz auf dem Tisch liegen. 
		Vor dem Beginn einer Runde wird der Spieler aufgefordert einen Einsatz zu setzen.
        Wenn der Spieler seine Spielwährung komplett verspielt hat, also nicht mehr liquide ist, so ist das Spiel beendet. 		</p>
		<h2>2. Features und Anforderungen</h2>
		<p>TODO: Stellen Sie die aus Ihrer Sicht wichtigsten funktionalen Anforderungen (maximal 10) zusammen:</p>
		<ul>
			<li>Was soll Ihre Anwendung leisten?</li>
			<p>Spielregeln:
			<ol>
			<li>Kartenwertigkeit:</li>
<<<<<<< Updated upstream
             <p>Bildkarten (Bube, Dame, König): 10 Punkte</p>	
			 <p>Ass: 1 oder 11 Punkte</p>
			 <p>Zahlenkarten (2 bis 10): jeweiliger Kartenwert in Punkten</p>
			 <li>Deck:</li>
			 <p>Gespielt wird mit 6 Decks a 52 Karten, also insgesamt 312 Karten. Wurden nach einem Spielzug 2/3 der Karten verspielt, so werden sie neu gemischt.</p>
			 <li>Busting (Überkaufen):</li>
			 <p>Übersteigt die Hand eines Spielers oder Dealers insgesamt 21, so ist der Spielzug für ihn automatisch verloren.</p>
			 <li>Hit and Stay (Schlagen oder Halten):</li>
			 <p>Beim Hit entscheidet der Spieler eine weitere Karte aufzunehmen. 
			 Beim Stay nimmt der Spieler keine weitere Karte auf. Danach sind die restlichen Spieler sowie der Dealer noch ein Mal an der Reihe. Anschließend werden die Karten aufgedeckt und ausgewertet. </p>
			 <li>Ausgabe der Karten:</li>
			 <p>Zu Beginn des Spiels erhalten der Dealer und die Spieler jeweils 2 Karten. Dabei ist eine Karte des Dealers verdeckt und wird erst bei der Auswertung aufgedeckt. 
			 Der Spieler kann im Verlauf des Spiels so viele Karten aufnehmen, bis er sich überkauft oder ein anderer Spieler den Spielzug beendet hat. </p>
			 <li>Regeln des Dealers:</li>
			  <p>Der Dealer muss eine Karte aufnehmen, wenn seine Hand weniger als 17 Punkte ergibt. Liegt er darüber, darf er keine aufnehmen.</p> 
			 <li>Mögliche Erweiterung: </li>
	 		 <p>Einsatzverdopplung:</p>
			 <p>Der Einsatz darf nur einmal pro Runde, vor dem Ziehen einer dritten Karte, verdoppelt werden.</p>
			 </ol>
			<li>Welche Dienste werden angeboten?</li>
			<p>Zunächst muss ein Spieleraccount mit Nickname erstellt werden. Dem Account wird ein Startkapital in Höhe von 5000$ zugewiesen.</p>
			<p>Nach dem Login kommt er ins Hauptmenü. Es besteht die Möglichkeit alleine oder mit einem weiteren Spieler zu spielen.  
			<li>Welche Eingangsdaten sind erforderlich? Zu welchen Ausgaben werden diese verarbeitet?</li>
			<p>Spielername (wird zu einem Account verarbeitet)</p>
			<p>Der Einsatz muss vor jedem Spielzuges von jedem Spieler getätigt werden. Danach werden erst die Karten ausgegeben.</p>
			
=======
             Bildkarten (Bube, Dame, König): 10 Punkte	
			 Ass: 1 oder 11 Punkte
			 Zahlenkarten (2 bis 10): jeweiliger Kartenwert in Punkten
			 <li>Regeln für das Ziehen einer Karte:</li>
			 </ol>
			<li>Welche Dienste werden angeboten?</li>
			<p>Anlegen eines Spieleracconts mit Nickname und Passwort</p>
			<li>Welche Eingangsdaten sind erforderlich? Zu welchen Ausgaben werden diese verarbeitet?</li>

			<p>Spielername und Passwort (wird zu einem Account verarbeitet)</p>
			<p>Benutzername; Passwort werden zum einloggen benötigt. (Grafische Ausgabe)</p>
			<p>Der Einsatz muss während eines Spielzuges vom Spieler festgelegt werden. (Grafische Ausgabe)</p>
			<p>Mögliche Erweiterung:</p>
			<p>Wenn die Möglichkeit des Spliten kommt wird der Spieler aufgefordert sich dafür oder dagegen zu entscheiden. (Grafische Ausgabe)</p>

>>>>>>> Stashed changes
			<li>Wie soll sich das System in bestimmten Situationen verhalten?</li>
			<p>Wenn der Spieler ein Black Jack gewinnt, kommt eine Meldung mit "Winner Winner Chicken Dinner".
			Wenn der Spieler verliert, bzw. der Dealer gewinnt, kommt eine Meldung mit "Spielzug verloren, Einsatz ist verzockt".
			Wenn der Spieler pleite ist, also sein Kontostand verspielt hat, kommt eine Meldung mit 
			"Looser, du wurdest von dem Türsteher rausgeworfen, hast dir von deinem Kumpel 5000€ geliehen und schleichst dich wieder ins Casino"
			und der Spieler bekommt die Möglichkeit sein Konto virituell wieder aufzuladen.
			</p>
			<li>Welche Daten sind dauerhaft zu speichern?</li>
<<<<<<< Updated upstream
			<p>Spieleraccounts: Spielername, Kontostand, Highscore</p>
			<p>Der Kontostand und Highscore wird unter dem Spielername auf dem Computer des Spielerstellers (Host) hinterlegt. Wollen die beiden Spieler das Spiel fortsetzen, können sie mit den zuletzt gespeicherten Daten weiterspielen.  </p>
=======
			<p>Benutzername; Passwort; Kontostand; Highscore</p>
>>>>>>> Stashed changes
		</ul>
		<p>TODO: Darüber hinaus sollen nicht-funktionale Anforderungen spezifiziert werden:</p>
		<ul>
			<li>Wie soll die Bedieneroberfläche aussehen?</li>
			<p>Nach dem Programmstart öffnet sich ein Loginfenster, bei dem sich der Spieler anmelden kann. Der Spieler gelangt nach einem erfolgreichen Login in</p>
			<p>das Hauptmenü. Hier kann der Spieler ein Spiel eröffnen oder einem Spiel beitreten.    </p>
			<p>Im Spielmodus wird der aktuelle Kontostand des Spielers, sowie die Summe der Kartenwerte der eigenen Hand angezeigt.</p>	
			<p>Die Karten der Spieler befinden sich im unteren Sichtfeld und die Karten des Dealers sind im oberen Sichtfeld dargestellt.</p>
			<p>Bedienelemente: <p>
			<p>Buttons in Design von Jetons, welche angeklickt werden können und dem Platzieren des Einsatzes dienen.</p> 
			<p>Geben-Button, der signalisiert, dass der Spieler den Einsatz getätigt hat und die Karten ausgeteilt werden können. </p>
			<p>Hit-Button, welcher signalisiert, dass eine weitere Karte aufgenommen werden möchte.</p>
               		<p>Stay-Button, der signalisiert, dass der Spiel keine weitere Karte aufnehmen möchte.</p>
               		<p>Verlassen-Button, der Spieler kehrt zum Hauptmenü zurück.</p>
			<p>Der Hintergrund soll einem Black-Jack Tisch nachempfunden sein</p> 
			   
			
			<li>In welcher Systemumgebung soll Ihr Programm lauffähig sein?</li>
			<p>Windows 10</p>
			<li>Mit welchen Entwicklungswerkzeugen wird gearbeitet?</li>
			<p>Eclipse IDE (Java)</p>
		</ul>
		
<<<<<<< Updated upstream
<h2>3. Architektur</h2>
<p>TODO: Beschreibung der Software-Architektur inkl. Klassendiagramm z. B.:</p>
<p>Das Klassendiagramm kann mit Hilfe von Pseudo Code (siehe HTML Quelltext) erstellt werden <a href="https://mermaid-js.github.io/mermaid/#/classDiagram">(Hilfe)</a>.
=======

<h2>3. Architektur</h2>
<p>TODO: Beschreibung der Software-Architektur inkl. Klassendiagramm z. B.:</p>
<p>Das Klassendiagramm kann mit Hilfe von Pseudo Code (siehe HTML Quelltext) erstellt werden <a href="https://mermaid-js.github.io/mermaid/#/classDiagram">(Hilfe)</a>.

>>>>>>> Stashed changes
<div class="diagram">
			classDiagram
			class Dealer {
				int kartennummer
				void hit()
				void stay()
				void act()
			}
			class Karten {
				int anz_ausgespielt
				int nummer
				-int wert
				String name
				static void austeilen()
			}
			
			class Spiel {
				public static void main()
			}
			class Layout {
				
			}
			class MyController {
				+void startGUI()
				+void actionPerformed()
			}
			class Spieler {
				-String name
				long kontostand
				long highscore
				int kartenwert
				static void registrieren ()
				void hit ()
				void stay()
				
			}
			class DataExchange {
				void startServer()
				void ServerRun()
			

			}
			Spiel <|--|> Spieler
			Spiel <|--|> Dealer
			Spiel <|--|> DataExchange
			Karten <|--|> Dealer
			Karten <|--|> Spieler
			MyController <|--|> Spieler
			MyController --|> Layout 
			DataExchange <|--|> Spieler
			DataExchange <|--|> Dealer
			DataExchange <|--|> Karten
			
			
		</div>

<<<<<<< Updated upstream

	
=======
			
>>>>>>> Stashed changes
		
		<h2>4. Aufwandsschätzung und Aufteilung</h2>
		<p>TODO: Schätzen Sie den Aufwand der verschiedenen Teile Ihres Programms ab und legen Sie fest, wie die Aufteilung auf die Gruppenmitglieder aussehen soll.</p>
		<p>Aufteilung der Arbeitsbereiche:</p>
<<<<<<< Updated upstream
<ul>
		<li>Background-Programmer: Dominik Riegger, Julian Hermle</li>
		<p>Befassen sich mit den internen Programmabläufen (Umsetzung der Spielregeln, Ablauf der Spielzüge, dauerhafte Speicherung der Daten, Innitialisierung bei Programmstart, etc.)</p>
		 

		<li>GUI-Programmer: Mario Kraupa, Jannik Wäschle</li>
		<p>Befassen sich mit der Grafischen Oberfläche (Buttons, Spielkarten, Animationen, Eingabeelemente, etc.).</p>
		
		<li>Server Manager: Paul Kammerer</li>
		<p>Befasst sich um die Serialisierung sowie das Abspeichern und Abrufen der Daten auf einem Server. Zudem wird er die Adaption zwischen den beiden Programmierbereichen vornehmen.</p>
		</ul>
=======
		<p>Background-Programmer: Dominik Riegger, Julian Hermle</p>
		<p>Befassen sich mit den internen Programmabläufen (Umsetzung der Spielregeln, Ablauf der Spielzüge, dauerhafte Speicherung der Daten, Innitialisierung bei Programmstart, etc.)</p>
		
		<p>GUI-Programmer: Mario Kraupa, Jannik Wäschle</p>
		<p>Befassen sich mit der Grafischen Oberfläche (Buttons, Spielkarten, Animationen, Eingabeelemente, etc.).</p>
		
		<p>Matching Manager: Paul Kammerer</p>
		<p>Befasst und kummert sich um die Adaption zwischen den beiden Programmierbereichen.</p>
		
>>>>>>> Stashed changes
		<p>Wir behalten uns vor Änderungen vorzunehmen.</p>
		
		<h2>Optional: Verweis auf andere HTML Dateien</h2>
		<p><a href="otherfile.html">Eine weitere HTML-Datei</a></p>
	</main>
	<footer></footer>
</body>
</html>

<!-- scripts to render diagrams (do not touch!) -->
<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
<script>
	mermaid.initialize({startOnLoad:true});
	let diagrams = document.querySelectorAll(".diagram")
	mermaid.init({}, diagrams);
</script>